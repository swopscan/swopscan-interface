[{"/Users/berkanturan/Desktop/swopscan.com/swopscan/src/index.js":"1","/Users/berkanturan/Desktop/swopscan.com/swopscan/src/App.js":"2","/Users/berkanturan/Desktop/swopscan.com/swopscan/src/reportWebVitals.js":"3","/Users/berkanturan/Desktop/swopscan.com/swopscan/src/components/Header/index.js":"4","/Users/berkanturan/Desktop/swopscan.com/swopscan/src/components/SidePools/index.js":"5","/Users/berkanturan/Desktop/swopscan.com/swopscan/src/components/Footer/index.js":"6","/Users/berkanturan/Desktop/swopscan.com/swopscan/src/components/Home/index.js":"7","/Users/berkanturan/Desktop/swopscan.com/swopscan/src/components/Wallet/index.js":"8","/Users/berkanturan/Desktop/swopscan.com/swopscan/src/components/PoolSummary/index.js":"9","/Users/berkanturan/Desktop/swopscan.com/swopscan/src/helpers/priceCalculators.js":"10","/Users/berkanturan/Desktop/swopscan.com/swopscan/src/assets/images/index.js":"11","/Users/berkanturan/Desktop/swopscan.com/swopscan/src/data/addresses.js":"12","/Users/berkanturan/Desktop/swopscan.com/swopscan/src/components/Wallet/WalletPoolDetail.js":"13","/Users/berkanturan/Desktop/swopscan.com/swopscan/src/components/Wallet/WalletOptions.js":"14","/Users/berkanturan/Desktop/swopscan.com/swopscan/src/components/SidePools/SidePool.js":"15","/Users/berkanturan/Desktop/swopscan.com/swopscan/src/theme/GlobalStyle.js":"16","/Users/berkanturan/Desktop/swopscan.com/swopscan/src/theme/index.js":"17","/Users/berkanturan/Desktop/swopscan.com/swopscan/src/components/Header/Donation.js":"18","/Users/berkanturan/Desktop/swopscan.com/swopscan/src/components/Header/Title.js":"19","/Users/berkanturan/Desktop/swopscan.com/swopscan/src/components/Header/WalletSearchForm.js":"20","/Users/berkanturan/Desktop/swopscan.com/swopscan/src/components/Wallet/SwopDetail.js":"21","/Users/berkanturan/Desktop/swopscan.com/swopscan/src/helpers/fetchPoolData.js":"22","/Users/berkanturan/Desktop/swopscan.com/swopscan/src/helpers/fetchWalletData.js":"23","/Users/berkanturan/Desktop/swopscan.com/swopscan/src/helpers/FetchPoolData.js":"24","/Users/berkanturan/Desktop/swopscan.com/swopscan/src/helpers/FetchWalletData.js":"25"},{"size":463,"mtime":1611679868933,"results":"26","hashOfConfig":"27"},{"size":3148,"mtime":1613340686281,"results":"28","hashOfConfig":"27"},{"size":362,"mtime":1608142208348,"results":"29","hashOfConfig":"27"},{"size":827,"mtime":1611675168678,"results":"30","hashOfConfig":"27"},{"size":819,"mtime":1611678977121,"results":"31","hashOfConfig":"27"},{"size":1086,"mtime":1613257416957,"results":"32","hashOfConfig":"27"},{"size":8351,"mtime":1613257398572,"results":"33","hashOfConfig":"27"},{"size":1400,"mtime":1613257219839,"results":"34","hashOfConfig":"27"},{"size":10160,"mtime":1612552211419,"results":"35","hashOfConfig":"27"},{"size":3702,"mtime":1608136952512,"results":"36","hashOfConfig":"27"},{"size":553,"mtime":1612972719696,"results":"37","hashOfConfig":"27"},{"size":5465,"mtime":1613256757839,"results":"38","hashOfConfig":"27"},{"size":6194,"mtime":1613340866946,"results":"39","hashOfConfig":"27"},{"size":1012,"mtime":1611971129299,"results":"40","hashOfConfig":"27"},{"size":3444,"mtime":1611681786303,"results":"41","hashOfConfig":"27"},{"size":375,"mtime":1608596043913,"results":"42","hashOfConfig":"27"},{"size":487,"mtime":1608639761485,"results":"43","hashOfConfig":"27"},{"size":1916,"mtime":1611684772959,"results":"44","hashOfConfig":"27"},{"size":708,"mtime":1611587124481,"results":"45","hashOfConfig":"27"},{"size":2245,"mtime":1611675234511,"results":"46","hashOfConfig":"27"},{"size":1187,"mtime":1613257385956,"results":"47","hashOfConfig":"27"},{"size":15457,"mtime":1613145162299,"results":"48","hashOfConfig":"49"},{"size":4731,"mtime":1613145157693,"results":"50","hashOfConfig":"49"},{"size":17908,"mtime":1613340478975,"results":"51","hashOfConfig":"27"},{"size":4963,"mtime":1613256774141,"results":"52","hashOfConfig":"27"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},"qsl5kb",{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"55"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"55"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"55"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":22,"source":"81","usedDeprecatedRules":"55"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"55"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"5vavwm",{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"55"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"55"},"/Users/berkanturan/Desktop/swopscan.com/swopscan/src/index.js",[],["111","112"],"/Users/berkanturan/Desktop/swopscan.com/swopscan/src/App.js",[],"/Users/berkanturan/Desktop/swopscan.com/swopscan/src/reportWebVitals.js",[],"/Users/berkanturan/Desktop/swopscan.com/swopscan/src/components/Header/index.js",[],"/Users/berkanturan/Desktop/swopscan.com/swopscan/src/components/SidePools/index.js",[],"/Users/berkanturan/Desktop/swopscan.com/swopscan/src/components/Footer/index.js",[],"/Users/berkanturan/Desktop/swopscan.com/swopscan/src/components/Home/index.js",["113","114","115","116","117","118"],"import { useContext } from 'react';\nimport styled from 'styled-components';\nimport { Info as InfoSVG } from 'react-feather';\nimport { PoolDataContext } from '../../App';\nimport * as images from '../../assets/images';\n\n\nconst StyledHomeScreen = styled.main`\n  grid-area: content;\n`;\n\nconst TotalLiquidityWrapper = styled.article`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(14.75em, 1fr));\n  gap: 1em;\n`;\n\nconst TotalLiquidity = styled.header`\n  padding: 12px;\n  border: 2px solid ${({theme}) => theme.colors.secondary};\n  border-radius: 5px;\n\n  h2 {\n    font-size: 1.1em;\n    color: #fff;\n    letter-spacing: 1px;\n    border: 2px solid ${({theme}) => theme.colors.secondary};\n    background-color: ${({theme}) => theme.colors.secondary};\n    border-right: none;\n    border-top: none;\n    text-align: center;\n    margin-top: -12px;\n    margin-right: -13px;\n    margin-left: 38%;\n    padding: 3px;\n    border-bottom-left-radius: 5px;\n\n    @media ${({theme}) => theme.mediaQueries.main.adjust} {\n      font-size: 1em;\n    }\n  }\n`;\n        \nconst StyledInfo = styled.p`\n  display: grid;\n  grid-template-columns: 1.2em 1fr;\n  gap: 5px;\n  font-size: 1.1em;\n  letter-spacing: 1px;\n  word-spacing: 1px;\n`;\n\nconst Info = styled(InfoSVG)`\n  width: 22px;\n  height: 22px;\n  color: ${({theme}) => theme.colors.main}\n`;\n\nconst AllAssets = styled.article`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  grid-gap: 10px;\n`;\n\nconst AllAssetTitle = styled.h2`\n  grid-column: 1 / -1;\n  background-color: ${({theme}) => theme.colors.secondary};\n  border-radius: 5px;\n  padding: 12px;\n  margin: 0;\n  font-size: 1em;\n  letter-spacing: 2px;\n  color: #fff;\n`;\n\nconst Asset = styled.div`\n  display: flex;\n  align-items: center;\n  border: 2px solid ${({theme}) => theme.colors.secondary};\n  border-radius: 5px;\n  padding: 12px;\n  font-size: 1.1em;\n  letter-spacing: 2px;\n`;\n\n\nfunction HomeScreen() {\n  const [poolData, poolProviderWallets, pricesInUSDN, pricesInWAVES, stakedSwopAmount] = useContext(PoolDataContext);\n\n  function calculateProvidedLiquidity() {\n    let liquidityInUSDN = 0;\n    let liquidityInWAVES = 0;\n\n    function calculateTotalLiquidity(currency, firstOfPair, secondOfPair, firstOfPairBalance, secondOfPairBalance, usdnStakingBalance, eurnStakingBalance, nsbtStakingBalance) {\n      const stakedAssets = {\n        names: ['USDN', 'EURN', 'NSBT'],\n        USDN: usdnStakingBalance,\n        EURN: eurnStakingBalance,\n        NSBT: nsbtStakingBalance\n      };\n\n      function calculate(pair, pairBalance) {\n        if(pair == currency) {\n          return (currency == 'USDN' ? pairBalance + stakedAssets[pair] : pairBalance);\n        } else if(stakedAssets.names.includes(pair)) {\n          return (pairBalance + stakedAssets[pair]) * (currency == 'USDN' ? pricesInUSDN[pair] : pricesInWAVES[pair]);\n        } else {\n          return pairBalance * (currency == 'USDN' ? pricesInUSDN[pair] : pricesInWAVES[pair]);\n        }\n      }\n\n      return Number((calculate(firstOfPair, firstOfPairBalance) + calculate(secondOfPair, secondOfPairBalance)).toFixed(6));\n    }\n    poolData.forEach(pairPoolData => {\n      liquidityInUSDN += calculateTotalLiquidity('USDN', pairPoolData.firstOfPair, pairPoolData.secondOfPair, pairPoolData.firstOfPairBalance, pairPoolData.secondOfPairBalance, pairPoolData.usdnStakingBalance, pairPoolData.eurnStakingBalance, pairPoolData.nsbtStakingBalance);\n    });\n    poolData.forEach(pairPoolData => {\n      liquidityInWAVES += calculateTotalLiquidity('WAVES', pairPoolData.firstOfPair, pairPoolData.secondOfPair, pairPoolData.firstOfPairBalance, pairPoolData.secondOfPairBalance, pairPoolData.usdnStakingBalance, pairPoolData.eurnStakingBalance, pairPoolData.nsbtStakingBalance);\n    });\n\n    return {inUSDN: Number(liquidityInUSDN.toFixed(6)), inWAVES: Number(liquidityInWAVES.toFixed(8))};\n  }\n  const providedLiquidity = calculateProvidedLiquidity();\n\n  const uniqueWallets = poolProviderWallets.uniqueWallets;\n\n  function calculateStakedAssets(asset) {\n    let totalStaked = 0;\n    let total = 0;\n    poolData.forEach(pairPoolData => {\n      totalStaked += pairPoolData[`${asset.toLowerCase()}StakingBalance`];\n      if(pairPoolData.firstOfPair == asset) {\n        total = totalStaked + pairPoolData.firstOfPairBalance;\n      }\n      if(pairPoolData.secondOfPair == asset) {\n        total = totalStaked + pairPoolData.secondOfPairBalance;\n      }\n    });\n    return {total, totalStaked: totalStaked.toLocaleString('en-US', {minimumFractionDigits: 4, maximumFractionDigits: 4})};\n  }\n  let { total: totalUSDN, totalStaked: totalStakedUSDN} = calculateStakedAssets('USDN');\n  let { total: totalEURN, totalStaked: totalStakedEURN} = calculateStakedAssets('EURN');\n  let { total: totalNSBT, totalStaked: totalStakedNSBT} = calculateStakedAssets('NSBT');\n\n  const providedAssets = {};\n  poolData.forEach(pairPoolData => {\n    if(!providedAssets[pairPoolData.firstOfPair]) {\n      providedAssets[pairPoolData.firstOfPair] = Number(pairPoolData.firstOfPairBalance.toFixed(pairPoolData.decimalsOfFirstPair));\n    } else {\n      providedAssets[pairPoolData.firstOfPair] = Number((providedAssets[pairPoolData.firstOfPair] + pairPoolData.firstOfPairBalance).toFixed(pairPoolData.decimalsOfFirstPair));\n    }\n\n    if(!providedAssets[pairPoolData.secondOfPair]) {\n      providedAssets[pairPoolData.secondOfPair] = Number(pairPoolData.secondOfPairBalance.toFixed(pairPoolData.decimalsOfSecondPair));\n    } else {\n      providedAssets[pairPoolData.secondOfPair] = Number((providedAssets[pairPoolData.secondOfPair] + pairPoolData.secondOfPairBalance).toFixed(pairPoolData.decimalsOfSecondPair));\n    }\n  });\n  providedAssets.USDN = totalUSDN;\n  providedAssets.EURN = totalEURN;\n  providedAssets.NSBT = totalNSBT;\n\n  return (\n    <StyledHomeScreen>\n      <aside>\n        <StyledInfo>\n          <Info />\n          swopscan, currently tracks 11 of 11 swop.fi liquidity pools.\n        </StyledInfo>\n      </aside>\n\n      <TotalLiquidityWrapper>\n        <TotalLiquidity token=\"USDN\" amount={providedLiquidity.inUSDN}>\n          <h2>Total Liquidity</h2>\n          <div style={{display: 'flex', alignItems: 'center'}}>\n            <img src={images.usdn} alt=\"usdn\" style={{width: 36, height: 36}} />\n            <p style={{fontSize: '1.2em', fontWeight: 'bold', letterSpacing: '1px', marginLeft: 10}}>{Number(providedLiquidity.inUSDN.toFixed()).toLocaleString()} <small style={{fontWeight: 'normal'}}>usdn</small></p>\n          </div>\n        </TotalLiquidity>\n        <TotalLiquidity token=\"WAVES\" amount={providedLiquidity.inWAVES}>\n          <h2>Total Liquidity</h2>\n          <div style={{display: 'flex', alignItems: 'center'}}>\n            <img src={images.waves} alt=\"waves\" style={{width: 36, height: 36}} />\n            <p style={{fontSize: '1.2em', fontWeight: 'bold', letterSpacing: '1px', marginLeft: 10}}>{Number(providedLiquidity.inWAVES.toFixed()).toLocaleString()} <small style={{fontWeight: 'normal'}}>waves</small></p>\n          </div>\n        </TotalLiquidity>\n      </TotalLiquidityWrapper>\n\n      <article>\n        <StyledInfo>\n          <Info />\n          {uniqueWallets} wallets are providing liquidity.\n        </StyledInfo>\n        <StyledInfo>\n          <Info />\n          {stakedSwopAmount.toLocaleString('en-US', {minimumFractionDigits: 4, maximumFractionDigits: 4})} SWOP is being staked in the governance.\n        </StyledInfo>\n        <StyledInfo>\n          <Info />\n          {totalStakedUSDN} USDN is being staked.\n        </StyledInfo>\n        <StyledInfo>\n          <Info />\n          {totalStakedEURN} EURN is being staked.\n        </StyledInfo>\n        <StyledInfo>\n          <Info />\n          {totalStakedNSBT} NSBT is being staked.\n        </StyledInfo>\n      </article>\n\n      <AllAssets>\n        <AllAssetTitle>Liquidity By Assets</AllAssetTitle>\n        {\n          Object.keys(providedAssets).map(assetName => {\n            return (\n              <Asset key={assetName}>\n                <img src={images[assetName.toLowerCase()]} alt={assetName} style={{width: 30, height: 30, marginRight: 5}} />\n                {providedAssets[assetName].toLocaleString('en-US', {maximumFractionDigits: 0})} {assetName.toLowerCase()}\n              </Asset>\n            );\n          })\n        }\n      </AllAssets>\n    </StyledHomeScreen>\n  )\n}\n\n\nexport { HomeScreen };","/Users/berkanturan/Desktop/swopscan.com/swopscan/src/components/Wallet/index.js",[],"/Users/berkanturan/Desktop/swopscan.com/swopscan/src/components/PoolSummary/index.js",["119","120","121","122","123","124"],"import { useContext, Fragment } from 'react'; \nimport styled from 'styled-components';\nimport { Repeat } from 'react-feather';\nimport { PoolDataContext } from '../../App';\nimport * as images from '../../assets/images';\n\n\nconst TitleWrapper = styled.header`\n  display: flex;\n  justify-content: flex-end;\n  margin-top: -8px;\n  margin-right: -8px;\n  @media ${({theme}) => theme.mediaQueries.main.adjust} {\n    margin-right: -4px;\n  }\n`;\n\nconst StyledTitle = styled.h2`\n  margin: 0;\n  margin-bottom: 1em;\n  font-size: 1.1em;\n  padding: 0.25em 0.5em;\n  min-width: 8.5em;\n  color: #fff;\n  background-color: ${({theme}) => theme.colors.secondary};\n  border-bottom: 2px solid ${({theme}) => theme.colors.secondary};\n  border-left: 2px solid ${({theme}) => theme.colors.secondary};\n  border-bottom-left-radius: 5px;\n`;\n\nconst HeaderImages = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nconst StyledImage = styled.img`\n  width: ${props => props.width};\n  height: ${props => props.width};\n  object-fit: cover;\n`;\n\nconst StyledRepeat = styled(Repeat)`\n  height: 100%;\n  justify-self: center;\n  align-self: center;\n  margin-right: 70px;\n  margin-left: 70px;\n  @media ${({theme}) => theme.mediaQueries.main.adjust} {\n    margin-right: 30px;\n    margin-left: 30px;\n  }\n`;\n\nconst PairPrices = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-around;\n  @media ${({theme}) => theme.mediaQueries.main.adjust} {\n    display: flex;\n    flex-direction: column;\n    margin-top: 10px;\n  }\n`;\n\nconst PairPriceSeparator = styled.div`\n  flex-basis: 30px;\n  @media ${({theme}) => theme.mediaQueries.main.adjust} {\n    flex-basis: 10px;\n  }\n`;\n\nconst PairPrice = styled.div`\n  margin-top: 6px;\n  margin-bottom: 12px;\n  font-size: 0.9em;\n  letter-spacing: 0.5px;\n  @media ${({theme}) => theme.mediaQueries.main.adjust} {\n    font-size: 0.825em;\n  }\n`;\n\n\nconst TopProviders = styled.ol`\n  padding-left: 0;\n  list-style-type: none;\n  display: grid;\n  grid-template-columns: max-content minmax(max-content, 1fr) minmax(max-content, 1fr);\n  align-items: center;\n  gap: 4px;\n\n\n  @media ${({theme}) => theme.mediaQueries.main.adjust} {\n    grid-template-columns: max-content minmax(max-content, 1fr);\n  }\n`;\n\nconst TopProvidersTitle = styled.h3`\n  grid-column: 1 / -1;\n  margin: 0;\n  margin-top: 10px;\n  margin-left: -8px;\n  padding: 8px;\n  font-size: 1.1em;\n  color: #fff;\n  border-top-right-radius: 5px;\n  border-bottom-right-radius: 5px;\n  background-color: ${({theme}) => theme.colors.secondary};\n`;\n\nconst WalletOrder = styled.div`\n  padding: 5px;\n  padding-right: ${props => props.order == 10 ? '5px' : '9px'};\n  padding-left: ${props => props.order == 10 ? '5px' : '9px'};\n  border: 1px solid ${({theme}) => theme.colors.main};\n  color: ${({theme}) => theme.colors.secondary};\n  font-weight: 600;\n  border-radius: 50%;\n  @media ${({theme}) => theme.mediaQueries.main.adjust} {\n    margin-left: -2px;\n  }\n`;\n\nconst WalletAddress = styled.div`\n  margin-left: -6px;\n  padding-left: 6px;\n  letter-spacing: 0.2px;\n  font-size: 0.95em;\n  border-bottom: 1px dotted ${({theme}) => theme.colors.main};\n  @media ${({theme}) => theme.mediaQueries.main.adjust} {\n    font-size: 0.825em;\n    margin-right: 4px;\n  }\n`;\n\nconst WalletBalance = styled.div`\n  margin-left: auto;\n  margin-right: 1px;\n  font-size: 0.95em;\n  letter-spacing: 0.5px;\n  @media ${({theme}) => theme.mediaQueries.main.adjust} {\n    font-size: 0.825em;\n    grid-column: 1 / -1;\n    margin-left: 34px;\n    justify-self: start;\n  }\n`;\n\nconst InfoWrapper = styled.div`\n  border: 1px solid ${({theme}) => theme.colors.secondary};\n  border-left: none;\n  border-top-right-radius: 5px;\n  border-bottom-right-radius: 5px;\n  padding: 12px;\n  padding-bottom: 8px;\n  margin-bottom: 10px;\n  margin-top: 4px;\n  margin-left: -10px;\n  @media ${({theme}) => theme.mediaQueries.main.adjust} {\n    padding-right: 0;\n  }\n\n  &:hover {\n    border: 1px solid ${({theme}) => theme.colors.main};\n    border-left-width: 2px;\n  }\n`;\n\nconst InfoTitle = styled.h3`\n  font-size: 1em;\n  font-weight: 600;\n  background-color: ${({theme}) => theme.colors.secondary};\n  color: #fff;\n  width: max-content;\n  min-width: 160px;\n  margin: 0;\n  border: 1px solid ${({theme}) => theme.colors.secondary};\n  border-left: none;\n  border-bottom-right-radius: 5px;\n  padding: 4px 8px;\n  margin-left: -10px;\n  margin-top: -13px;\n  letter-spacing: 1px;\n  word-spacing: 1px;\n\n  ${InfoWrapper}:hover & {\n    border-color: ${({theme}) => theme.colors.main};\n    background-color: ${({theme}) => theme.colors.main};\n    margin-left: -13px;\n    min-width: 180px;\n    padding-left: 9px;\n  }\n\n  @media ${({theme}) => theme.mediaQueries.main.adjust} {\n    padding-left: 6px;\n\n    ${InfoWrapper}:hover & {\n      padding-left: 7px;\n    }\n  }\n`;\n\nconst Info = styled.p`\n  margin: 0;\n  margin-top: 8px;\n  letter-spacing: 1px;\n  padding-left: 4px;\n\n  @media ${({theme}) => theme.mediaQueries.main.adjust} {\n    margin-left: -3px;\n    padding-left: 0;\n    letter-spacing: 0.05px;\n    font-size: 0.775em;\n\n  }\n`;\n\nconst StyledPoolSummary = styled.main`\n  grid-area: content;\n  align-self: start;\n  border: 2px solid ${({theme}) => theme.colors.secondary};\n  padding: 8px;\n  border-radius: 5px;\n  margin-bottom: 0.75em;\n  @media ${({theme}) => theme.mediaQueries.main.adjust} {\n    padding-right: 4px;\n  }\n`;\n\n\nfunction PoolSummary({pool}) {\n  const [poolData, poolProviderWallets] = useContext(PoolDataContext);\n  const pairPoolData = poolData.find(pairPoolData => pairPoolData.poolPair == pool);\n  const pairPoolProviderWallets = poolProviderWallets[Object.keys(poolProviderWallets).find(poolPairName => poolPairName == pool)];\n\n  const stakedAssets = {\n    names: ['USDN', 'EURN', 'NSBT'],\n    USDN: pairPoolData.usdnStakingBalance,\n    EURN: pairPoolData.eurnStakingBalance,\n    NSBT: pairPoolData.nsbtStakingBalance\n  };\n  function displayPairBalance(pair, pairBalance, decimals) {\n    if(stakedAssets.names.includes(pair)) {\n      return (pairBalance + stakedAssets[pair]).toLocaleString('en-US', {maximumFractionDigits: decimals});\n    } else {\n      return pairBalance.toLocaleString('en-US', {maximumFractionDigits: decimals});\n    }\n  }\n\n  return (\n    <StyledPoolSummary id={pairPoolData.poolPair}>\n      <article>\n        <TitleWrapper>\n          <StyledTitle>\n            {pairPoolData.poolPair}\n          </StyledTitle>\n        </TitleWrapper>\n\n        <HeaderImages>\n          <StyledImage width={\"66px\"} height={\"66px\"} src={images[pairPoolData.firstOfPair.toLowerCase()]} alt={pairPoolData.firstOfPair}  />\n          <StyledRepeat size={20} color=\"mediumseagreen\" />\n          <StyledImage width={\"66px\"} height={\"66px\"}  src={images[pairPoolData.secondOfPair.toLowerCase()]} alt={pairPoolData.secondOfPair}  />\n        </HeaderImages>\n\n        <PairPrices>\n          <div style={{flex: 1, display: 'flex', justifyContent: 'flex-end'}}>\n            <StyledImage width={\"12px\"} height={\"12px\"}  src={images[pairPoolData.firstOfPair.toLowerCase()]} alt={pairPoolData.firstOfPair}  />\n            <PairPrice>1 {pairPoolData.firstOfPair} = {pairPoolData.firstOfPair == 'BTC' ? Number((pairPoolData.firstOfPairPrice).toFixed(4)) : pairPoolData.firstOfPairPrice} {pairPoolData.secondOfPair}</PairPrice>\n\n            <StyledImage width={\"12px\"} height={\"12px\"}  src={images[pairPoolData.secondOfPair.toLowerCase()]} alt={pairPoolData.secondOfPair}  />\n          </div>\n          <PairPriceSeparator />\n          <div style={{flex: 1, display: 'flex', justifyContent: 'flex-start'}}>\n            <StyledImage width={\"12px\"} height={\"12px\"}  src={images[pairPoolData.secondOfPair.toLowerCase()]} alt={pairPoolData.secondOfPair}  />\n            <PairPrice>1 {pairPoolData.secondOfPair} = {pairPoolData.secondOfPair == 'BTC' ? Number((pairPoolData.secondOfPairPrice).toFixed(4)) : pairPoolData.secondOfPairPrice} {pairPoolData.firstOfPair}</PairPrice>\n            <StyledImage width={\"12px\"} height={\"12px\"}  src={images[pairPoolData.firstOfPair.toLowerCase()]} alt={pairPoolData.firstOfPair}  />\n          </div>\n        </PairPrices>\n\n        {/*<InfoWrapper>\n          <InfoTitle>providing wallets</InfoTitle> \n          <Info>{pairPoolProviderWallets.length}</Info>\n        </InfoWrapper>*/}\n        \n        <InfoWrapper>\n          <InfoTitle>{pairPoolData.firstOfPair.toLowerCase()}</InfoTitle>\n          <Info>\n          {\n            displayPairBalance(pairPoolData.firstOfPair, pairPoolData.firstOfPairBalance, pairPoolData.decimalsOfFirstPair)\n          }\n        </Info>\n        </InfoWrapper>\n        <InfoWrapper>\n          <InfoTitle>{pairPoolData.secondOfPair.toLowerCase()}</InfoTitle> \n          <Info>\n          {\n            displayPairBalance(pairPoolData.secondOfPair, pairPoolData.secondOfPairBalance, pairPoolData.decimalsOfSecondPair)\n          }\n          </Info>\n        </InfoWrapper>\n        <InfoWrapper>\n          <InfoTitle>pool asset name</InfoTitle> \n          <Info>{pairPoolData.poolAssetName}</Info>\n        </InfoWrapper>\n        <InfoWrapper>\n          <InfoTitle>pool asset id</InfoTitle> \n          <Info>{pairPoolData.poolAssetId}</Info>\n        </InfoWrapper>\n        <InfoWrapper>\n          <InfoTitle>issued pool asset</InfoTitle> \n          <Info>{pairPoolData.poolAssetBalance.toLocaleString('en-US', {maximumFractionDigits: 4})}</Info>\n        </InfoWrapper>\n\n        <TopProviders>\n          <TopProvidersTitle>\n            Top 10 Liquidity Providers\n          </TopProvidersTitle>\n          {\n            pairPoolProviderWallets.slice(0, 10).map((pairPoolProviderWallet, idx) => {\n              return (\n                <Fragment key={Object.keys(pairPoolProviderWallet)[0]}>\n                  <WalletOrder order={idx+1}>{idx + 1}</WalletOrder>\n                  <WalletAddress>{Object.keys(pairPoolProviderWallet)[0]}</WalletAddress>\n                  <WalletBalance>{pairPoolProviderWallet[Object.keys(pairPoolProviderWallet)[0]].toLocaleString('en-US', {minimumFractionDigits: 4, maximumFractionDigits: 4})}</WalletBalance>\n                </Fragment>\n              );\n            })\n          }\n        </TopProviders>\n      </article>\n    </StyledPoolSummary>\n  )\n}\n\n\nexport { PoolSummary };","/Users/berkanturan/Desktop/swopscan.com/swopscan/src/helpers/priceCalculators.js",["125","126","127","128","129","130","131","132","133","134","135"],"export function usdnPriceCalculator(poolData) {\n  if(!poolData) return;\n  let uncalculatedInTermsOfUSDN = [];\n  const pricesInTermsOfUSDN = {}; \n  poolData.forEach(pool => {\n    if(pool.firstOfPair == 'USDN') {\n      pricesInTermsOfUSDN[pool.secondOfPair] = Number(pool.secondOfPairPrice.toFixed(4));\n    } else if(pool.secondOfPair == 'USDN') {\n      pricesInTermsOfUSDN[pool.firstOfPair] = Number(pool.firstOfPairPrice.toFixed(4));\n    } else if(pool.firstOfPair != 'USDN' && pool.secondOfPair != 'USDN') {\n      uncalculatedInTermsOfUSDN.push(pool.firstOfPair, pool.secondOfPair);\n      return;\n    }\n  });\n\n  let calculatedInTermsOfUSDN = Object.keys(pricesInTermsOfUSDN);\n  uncalculatedInTermsOfUSDN = uncalculatedInTermsOfUSDN.filter(uncalculated => {\n    if(calculatedInTermsOfUSDN.includes(uncalculated)) return false;\n    return true;\n  });\n\n  //if there is any uncalculated pair in terms of usdn, try to derive from waves price\n  if(uncalculatedInTermsOfUSDN.length > 0) {\n    function deriveFromWaves() {\n      const pricesInTermsOfWAVES = {}; \n      poolData.forEach(pool => {\n        if(pool.firstOfPair == 'WAVES') {\n          pricesInTermsOfWAVES[pool.secondOfPair] = Number(pool.secondOfPairPrice.toFixed(4));\n        } else if(pool.secondOfPair == 'WAVES') {\n          pricesInTermsOfWAVES[pool.firstOfPair] = Number(pool.firstOfPairPrice.toFixed(4));\n        }\n      });\n      uncalculatedInTermsOfUSDN.forEach(uncalculated => {\n        Object.keys(pricesInTermsOfWAVES).find(wavesPriced => {\n          if(uncalculated === wavesPriced) {\n            pricesInTermsOfUSDN[wavesPriced] = Number((pricesInTermsOfWAVES[wavesPriced] * pricesInTermsOfUSDN.WAVES).toFixed(4));\n            return true;\n          }\n          return false;\n        });\n      });\n    }\n    deriveFromWaves();\n\n    calculatedInTermsOfUSDN = Object.keys(pricesInTermsOfUSDN);\n    uncalculatedInTermsOfUSDN = uncalculatedInTermsOfUSDN.filter(uncalculated => {\n      if(calculatedInTermsOfUSDN.includes(uncalculated)) return false;\n      return true;\n    });\n  }  \n  \n  pricesInTermsOfUSDN.uncalculatedInTermsOfUSDN = uncalculatedInTermsOfUSDN;\n\n  return pricesInTermsOfUSDN;\n}\n\n//\n\nexport function wavesPriceCalculator(poolData, pricesInTermsOfUSDN) {\n  if(!poolData) return;\n  let uncalculatedInTermsOfWAVES = [];\n  const pricesInTermsOfWAVES = {}; \n  poolData.forEach(pool => {\n    if(pool.firstOfPair == 'WAVES') {\n      pricesInTermsOfWAVES[pool.secondOfPair] = Number(pool.secondOfPairPrice.toFixed(4));\n    } else if(pool.secondOfPair == 'WAVES') {\n      pricesInTermsOfWAVES[pool.firstOfPair] = Number(pool.firstOfPairPrice.toFixed(4));\n    } else if(pool.firstOfPair != 'WAVES' && pool.secondOfPair != 'WAVES') {\n      uncalculatedInTermsOfWAVES.push(pool.firstOfPair, pool.secondOfPair);\n      return;\n    }\n  });\n\n  //try to derive uncalculated prices from usdn pair prices.\n  if(uncalculatedInTermsOfWAVES.length > 0) {\n    const calculatedInTermsOfUSDN = Object.keys(pricesInTermsOfUSDN);\n    uncalculatedInTermsOfWAVES.forEach(uncalculated => {\n      calculatedInTermsOfUSDN.find(usdnPriced => {\n        if(usdnPriced == uncalculated) {\n          pricesInTermsOfWAVES[usdnPriced] = Number((pricesInTermsOfUSDN[usdnPriced] * pricesInTermsOfWAVES.USDN).toFixed(4));\n          return true;\n        }\n        return false;\n      });\n    });\n  }\n\n  const calculatedInTermsOfWAVES = Object.keys(pricesInTermsOfWAVES);\n  uncalculatedInTermsOfWAVES = uncalculatedInTermsOfWAVES.filter(uncalculated => {\n    if(calculatedInTermsOfWAVES.includes(uncalculated)) return false;\n    return true;\n  });\n\n  pricesInTermsOfWAVES.uncalculatedInTermsOfWAVES = uncalculatedInTermsOfWAVES;\n\n  return pricesInTermsOfWAVES;\n}","/Users/berkanturan/Desktop/swopscan.com/swopscan/src/assets/images/index.js",[],"/Users/berkanturan/Desktop/swopscan.com/swopscan/src/data/addresses.js",["136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157"],"export const nodeURL = 'https://nodes.wavesnodes.com';\n\nexport const poolAssets = {\n  ['SWOP - USDN']: {address: 'ESg4EvZaY74xe3p2dxHeXpV3RNeJd7fda4aN9RtL4bzn', decimals: 7, name: 'sSWOP_USD-N', pool: '3P27S9V36kw2McjWRZ37AxTx8iwkd7HXw6W'},\n  ['WAVES - USDN']: {address: 'Btw3G1j4wQgdp49PTxaFkNvn75dQtqGDM7ejQppHnWC1', decimals: 7, name: 'sWAVES_USD-N', pool: '3PHaNgomBkrvEL2QnuJarQVJa71wjw9qiqG'},\n  ['BTC - USDN']: {address: '58RNQJqLQ3tYYpkjuJujWzLzMX3nzpGn6bTC8LfLtgAM', decimals: 7, name: 'sWBTC_USD-N', pool: '3PACj2DLTw3uUhsUmT98zHU5M4hPufbHKav'},\n  ['USDT - USDN']: {address: 'BNQ8bxyiWvfHzHAtNyfc6E7v3sSHXKq8yuit6Fnz1A3Q', decimals: 6, name: 'sUSDT_USD-N', pool: '3PPH7x7iqobW5ziyiRCic19rQqKr6nPYaK1'},\n  ['ETH - USDN']: {address: 'H8wRVSgq82j6YU1K7jXVpDXHpd5m91t3bmCzRR7uFGc7', decimals: 7, name: 'sWETH_USD-N', pool: '3PNEC4YKqZiMMytFrYRVtpW2ujvi3aGXRPm'},\n  ['NSBT - USDN']: {address: 'HWFcdC9wjPJY1udkR2UsfXzyPptzBb9m6df8qUW6LNLo', decimals: 6, name: 'sNSBT_USD-N', pool: '3P2V63Xd6BviDkeMzxhUw2SJyojByRz8a8m'},\n  ['USDLP - USDN']: {address: '9Pm2c97VzGSK6p8XGMCFABs575K9Cb35GdKtzwVA59m9', decimals: 6, name: 'sUSDLP_USD-N', pool: '3PDWi8hjQJjXhyTpeaiEYfFKWBd1iC4udfF'},\n  ['WAVES - BTC']: {address: '2DiiWi3RLuTYBj81iwACCSayD9d1aY2ucfoJUBDHiqH8', decimals: 8, name: 'sWAVES_WBTC', pool: '3P8FVZgAJUAq32UEZtTw84qS4zLqEREiEiP'},\n  ['WEST - USDN']: {address: '8g1Ki9cvjjhLUTyNwd4MaZ4fNfNTVc92Cb6f8My4qb1A', decimals: 7, name: 'sWEST_USD-N', pool: '3P6DLdJTP2EySq9MFdJu6beUevrQd2sVVBh'},\n  ['WCT - USDN']: {address: 'AAmQ1M3pG9fP882RJdfeaoLbRtzBuwPmsximGhPXVQXN', decimals: 4, name: 'sWavesCo_USD-N', pool: '3PMDFxmG9uXAbuQgiNogZCBQASvCHt1Mdar'},\n  ['WAVES - EURN']: {address: 'Bz9HaLundrPQU1ibVkQt82rYnfQHXKwp6Ts9EXRLyyPk', decimals: 7, name: 'sWAVES_EURN', pool: '3PK7Xe5BiedRyxHLuMQx5ey9riUQqvUths2'}\n};\n\nexport const pools = {\n  ['SWOP - USDN']: {\n    poolAddress: '3P27S9V36kw2McjWRZ37AxTx8iwkd7HXw6W', \n    firstOfPair: 'SWOP', \n    secondOfPair: 'USDN', \n    firstOfPairAddress: 'Ehie5xYpeN8op1Cctc6aGUrqx8jq3jtf1DSjXDbfm7aT', \n    secondOfPairAddress: 'DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p', \n    decimalsOfFirstPair: 8, \n    decimalsOfSecondPair: 6\n  },\n  ['WAVES - USDN']: {\n    poolAddress: '3PHaNgomBkrvEL2QnuJarQVJa71wjw9qiqG', \n    firstOfPair: 'WAVES', \n    secondOfPair: 'USDN', \n    firstOfPairAddress: 'WAVES', \n    secondOfPairAddress: 'DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p', \n    decimalsOfFirstPair: 8, \n    decimalsOfSecondPair: 6\n  },\n  ['BTC - USDN']: {\n    poolAddress: '3PACj2DLTw3uUhsUmT98zHU5M4hPufbHKav', \n    firstOfPair: 'BTC', \n    secondOfPair: 'USDN', \n    firstOfPairAddress: '8LQW8f7P5d5PZM7GtZEBgaqRPGSzS3DfPuiXrURJ4AJS', \n    secondOfPairAddress: 'DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p', \n    decimalsOfFirstPair: 8, \n    decimalsOfSecondPair: 6\n  },\n  ['USDT - USDN']: {\n    poolAddress: '3PPH7x7iqobW5ziyiRCic19rQqKr6nPYaK1', \n    firstOfPair: 'USDT', \n    secondOfPair: 'USDN', \n    firstOfPairAddress: '34N9YcEETLWn93qYQ64EsP1x89tSruJU44RrEMSXXEPJ', \n    secondOfPairAddress: 'DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p', \n    decimalsOfFirstPair: 6, \n    decimalsOfSecondPair: 6\n  },\n  ['ETH - USDN']: {\n    poolAddress: '3PNEC4YKqZiMMytFrYRVtpW2ujvi3aGXRPm', \n    firstOfPair: 'ETH', \n    secondOfPair: 'USDN', \n    firstOfPairAddress: '474jTeYx2r2Va35794tCScAXWJG9hU2HcgxzMowaZUnu', \n    secondOfPairAddress: 'DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p', \n    decimalsOfFirstPair: 8, \n    decimalsOfSecondPair: 6\n  },\n  ['NSBT - USDN']: {\n    poolAddress: '3P2V63Xd6BviDkeMzxhUw2SJyojByRz8a8m', \n    firstOfPair: 'NSBT', \n    secondOfPair: 'USDN', \n    firstOfPairAddress: '6nSpVyNH7yM69eg446wrQR94ipbbcmZMU1ENPwanC97g', \n    secondOfPairAddress: 'DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p', \n    decimalsOfFirstPair: 6, \n    decimalsOfSecondPair: 6\n  },\n  ['USDLP - USDN']: {\n    poolAddress: '3PDWi8hjQJjXhyTpeaiEYfFKWBd1iC4udfF', \n    firstOfPair: 'USDLP', \n    secondOfPair: 'USDN', \n    firstOfPairAddress: '9AT2kEi8C4AYxV1qKxtQTVpD5i54jCPvaNNRP6VzRtYZ', \n    secondOfPairAddress: 'DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p', \n    decimalsOfFirstPair: 6, \n    decimalsOfSecondPair: 6\n  },\n  ['WAVES - BTC']: {\n    poolAddress: '3P8FVZgAJUAq32UEZtTw84qS4zLqEREiEiP', \n    firstOfPair: 'WAVES', \n    secondOfPair: 'BTC', \n    firstOfPairAddress: 'WAVES', \n    secondOfPairAddress: '8LQW8f7P5d5PZM7GtZEBgaqRPGSzS3DfPuiXrURJ4AJS', \n    decimalsOfFirstPair: 8, \n    decimalsOfSecondPair: 8\n  },\n  ['WEST - USDN']: {\n    poolAddress: '3P6DLdJTP2EySq9MFdJu6beUevrQd2sVVBh', \n    firstOfPair: 'WEST', \n    secondOfPair: 'USDN', \n    firstOfPairAddress: '4LHHvYGNKJUg5hj65aGD5vgScvCBmLpdRFtjokvCjSL8', \n    secondOfPairAddress: 'DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p', \n    decimalsOfFirstPair: 8, \n    decimalsOfSecondPair: 6\n  },\n  ['WCT - USDN']: {\n    poolAddress: '3PMDFxmG9uXAbuQgiNogZCBQASvCHt1Mdar', \n    firstOfPair: 'WCT', \n    secondOfPair: 'USDN', \n    firstOfPairAddress: 'DHgwrRvVyqJsepd32YbBqUeDH4GJ1N984X8QoekjgH8J', \n    secondOfPairAddress: 'DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p', \n    decimalsOfFirstPair: 2, \n    decimalsOfSecondPair: 6\n  },\n  ['WAVES - EURN']: {\n    poolAddress: '3PK7Xe5BiedRyxHLuMQx5ey9riUQqvUths2', \n    firstOfPair: 'WAVES', \n    secondOfPair: 'EURN', \n    firstOfPairAddress: 'WAVES', \n    secondOfPairAddress: 'DUk2YTxhRoAqMJLus4G2b3fR8hMHVh6eiyFx5r29VR6t', \n    decimalsOfFirstPair: 8, \n    decimalsOfSecondPair: 6\n  }\n}","/Users/berkanturan/Desktop/swopscan.com/swopscan/src/components/Wallet/WalletPoolDetail.js",["158","159"],"/Users/berkanturan/Desktop/swopscan.com/swopscan/src/components/Wallet/WalletOptions.js",[],"/Users/berkanturan/Desktop/swopscan.com/swopscan/src/components/SidePools/SidePool.js",["160","161"],"import { useContext, memo } from 'react';\nimport styled from 'styled-components';\nimport { Repeat } from 'react-feather';\nimport { PoolDataContext } from '../../App';\nimport * as images from '../../assets/images';\n\n\nconst StyledImage = styled.img`\n  width: 30px;\n  height: 30px;\n  object-fit: cover;\n`;\n\nconst SidePoolData = styled.p`\n  grid-column: 1 / -1;\n  justify-self: center;\n  display: flex;\n  font-weight: bold;\n  font-size: 1.2em;\n  letter-spacing: 1px;\n  margin-bottom: 0;\n`;\n\nconst StyledSidePool = styled.li`\n  padding: 12px;\n  margin-bottom: 0.75em;\n  display: grid;\n  grid-template-columns: 50px 24px 50px;\n  justify-content: center;\n  border: 2px solid ${props => props.id === props.pool ? props.theme.colors.secondary : props.theme.colors.main};\n  border-radius: 5px;\n  cursor: pointer;\n\n  :hover {\n    border-color: ${({theme}) => theme.colors.secondary};\n  }\n\n  :focus {\n    outline-color: ${({theme}) => theme.colors.secondary};\n    border-color: ${({theme}) => theme.colors.secondary}\n  }\n`;\n\n\nfunction SidePool({firstOfPair, secondOfPair, id, pool, choosePool, showHomeScreen, showWallet}) {\n  const [poolData,,pricesInUSDN] = useContext(PoolDataContext);\n  const pairPoolData = poolData.find(pairPoolData => pairPoolData.poolPair == id);\n\n  function calculateProvidedLiquidity(firstOfPair, secondOfPair, firstOfPairBalance, secondOfPairBalance, usdnStakingBalance, eurnStakingBalance, nsbtStakingBalance) {\n    const stakedAssets = {\n      names: ['USDN', 'EURN', 'NSBT'],\n      USDN: usdnStakingBalance,\n      EURN: eurnStakingBalance,\n      NSBT: nsbtStakingBalance\n    };\n    function calculate(pair, pairBalance) {\n      if(pair == 'USDN') {\n        return pairBalance + stakedAssets[pair];\n      } else if(stakedAssets.names.includes(pair)) {\n        return (pairBalance + stakedAssets[pair]) * pricesInUSDN[pair];\n      } else {\n        return pairBalance * pricesInUSDN[pair];\n      }\n    }\n    let firstOfPairValueInUSDN = calculate(firstOfPair, firstOfPairBalance);\n    let secondOfPairValueInUSDN = calculate(secondOfPair, secondOfPairBalance);\n\n    return Number((firstOfPairValueInUSDN + secondOfPairValueInUSDN).toFixed(0));\n  }\n  const providedLiquidity = calculateProvidedLiquidity(pairPoolData.firstOfPair, pairPoolData.secondOfPair, pairPoolData.firstOfPairBalance, pairPoolData.secondOfPairBalance, pairPoolData.usdnStakingBalance, pairPoolData.eurnStakingBalance, pairPoolData.nsbtStakingBalance);\n\n  return (\n    <StyledSidePool \n      id={id} \n      pool={pool}\n      onClick={() => {\n        choosePool(id); \n        showHomeScreen(false); \n        showWallet(false);\n        window.scroll({\n          top: 0, \n          left: 0, \n          behavior: 'smooth'\n        });        \n        }\n      }\n      tabIndex={0}\n      aria-label={`${firstOfPair} ${secondOfPair} liquidity pool`}\n    >\n      <StyledImage src={images[firstOfPair]} alt={firstOfPair}  />\n      <Repeat size={12} color=\"mediumseagreen\" style={{justifySelf: 'center', alignSelf: 'center'}} />\n      <StyledImage src={images[secondOfPair]} alt={secondOfPair} style={{justifySelf: 'end'}} />\n      <SidePoolData>\n        <img style={{width: 18, height: 18, marginRight: 4}} src={images.usdn} alt={'usdn'} />\n        {typeof providedLiquidity == 'number' && !Object.is(providedLiquidity, NaN) ? providedLiquidity.toLocaleString() : 'calculation error'}\n      </SidePoolData>\n    </StyledSidePool>\n  )\n}\n\n\nexport default memo(SidePool);","/Users/berkanturan/Desktop/swopscan.com/swopscan/src/theme/GlobalStyle.js",[],"/Users/berkanturan/Desktop/swopscan.com/swopscan/src/theme/index.js",[],"/Users/berkanturan/Desktop/swopscan.com/swopscan/src/components/Header/Donation.js",[],"/Users/berkanturan/Desktop/swopscan.com/swopscan/src/components/Header/Title.js",[],"/Users/berkanturan/Desktop/swopscan.com/swopscan/src/components/Header/WalletSearchForm.js",[],"/Users/berkanturan/Desktop/swopscan.com/swopscan/src/components/Wallet/SwopDetail.js",[],"/Users/berkanturan/Desktop/swopscan.com/swopscan/src/helpers/fetchPoolData.js",["162","163","164","165","166","167","168","169","170"],"/Users/berkanturan/Desktop/swopscan.com/swopscan/src/helpers/fetchWalletData.js",["171","172"],"/Users/berkanturan/Desktop/swopscan.com/swopscan/src/helpers/FetchPoolData.js",["173","174","175","176","177","178","179","180","181","182","183"],"import { useEffect, useReducer } from 'react';\nimport { pools, poolAssets, nodeURL } from '../data/addresses';\nimport { usdnPriceCalculator, wavesPriceCalculator } from './priceCalculators';\n\n\nconst initialState = {\n  isError: false,\n  loading: true,\n  poolData: null,\n  poolProviderWallets: null,\n  pricesInUSDN: null,\n  pricesInWAVES: null,\n  stakedSwopAmount: NaN\n};\n\nfunction reducer(currentState, action) {\n  switch(action.type) {\n    case 'DONE':\n      return {\n        isError: false, \n        loading: false,\n        poolData: action.payload.poolData,\n        poolProviderWallets: action.payload.poolProviderWallets,\n        pricesInUSDN: action.payload.pricesInUSDN,\n        pricesInWAVES: action.payload.pricesInWAVES,\n        stakedSwopAmount: action.payload.stakedSwopAmount,\n      }\n    case 'ERROR':\n      return {...currentState, isError: true, loading: false};\n    default: \n      return currentState;\n  }\n}\n\nfunction FetchPoolData() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  //fetching pool balances in pairs and price calculation\n  useEffect(() => {\n    //helper\n    function fetchSuccessHandler(response) {\n      if(!response.ok) {\n        throw new Error('Unknown but certainly caught error!, hopefully :)');\n      }\n      return response.json();\n    }\n\n    //fetching pair balances in all tracked pools(also usdn staking balance of the related pool if one of the pair is usdn) and returning along with some of the arguments. \n    //will merge with related-prices in all pools data which is coming from  \"fetchAndCalculatePairPrices\"\n    async function fetchPoolData({poolAddress, firstOfPair, secondOfPair, firstOfPairAddress, secondOfPairAddress, decimalsOfFirstPair, decimalsOfSecondPair}, poolPair) {\n      const stakedAssets = {\n        names: ['USDN', 'EURN', 'NSBT'],\n        USDN: {address: `${nodeURL}/addresses/data/3PNikM6yp4NqcSU8guxQtmR5onr2D4e8yTJ/rpd_balance_DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p`, decimals: 6},\n        EURN: {address: `${nodeURL}/addresses/data/3PFhcMmEZoQTQ6ohA844c7C9M8ZJ18P8dDj/%25s%25s%25s__stakingBalance__DUk2YTxhRoAqMJLus4G2b3fR8hMHVh6eiyFx5r29VR6t_`, decimals: 6},\n        NSBT: {address: `${nodeURL}/addresses/data/3PNikM6yp4NqcSU8guxQtmR5onr2D4e8yTJ/rpd_balance_6nSpVyNH7yM69eg446wrQR94ipbbcmZMU1ENPwanC97g`, decimals: 6}\n      };\n      \n      try {\n          //using this API for WAVES: \"https://nodes.wavesnodes.com/api-docs/index.html#/addresses/balance_3\"\n          //using this API for assets: \"https://nodes.wavesnodes.com/api-docs/index.html#/assets/balance\"\n        let [firstOfPairBalance, secondOfPairBalance, usdnStakingBalance, eurnStakingBalance, nsbtStakingBalance] = await Promise.all([\n          (firstOfPair == 'WAVES') ? \n            (fetch(`${nodeURL}/addresses/balance/${poolAddress}`)\n              .then(fetchSuccessHandler)) : \n              (fetch(`${nodeURL}/assets/balance/${poolAddress}/${firstOfPairAddress}`)\n                .then(fetchSuccessHandler)),\n        \n          (secondOfPair == 'WAVES') ? \n            (fetch(`${nodeURL}/addresses/balance/${poolAddress}`)\n              .then(fetchSuccessHandler)) : \n              (fetch(`${nodeURL}/assets/balance/${poolAddress}/${secondOfPairAddress}`)\n                .then(fetchSuccessHandler)),\n\n          //using this API: \"https://nodes.wavesnodes.com/api-docs/index.html#/addresses/getDataItem_1\"\n          ...stakedAssets.names.map(stakedAsset => {\n            return (stakedAsset == firstOfPair || stakedAsset == secondOfPair) ?\n              fetch(`${stakedAssets[stakedAsset].address}_${poolAddress}`)\n                .then(fetchSuccessHandler) : \n                undefined\n          })\n        ]);\n\n        firstOfPairBalance = (firstOfPairBalance.balance / (10**decimalsOfFirstPair));\n        secondOfPairBalance = (secondOfPairBalance.balance / (10**decimalsOfSecondPair));\n        usdnStakingBalance = usdnStakingBalance ? (usdnStakingBalance.value / (10**stakedAssets.USDN.decimals)) : 0;\n        eurnStakingBalance = eurnStakingBalance ? (eurnStakingBalance.value / (10**stakedAssets.EURN.decimals)) : 0;\n        nsbtStakingBalance = nsbtStakingBalance ? (nsbtStakingBalance.value / (10**stakedAssets.NSBT.decimals)) : 0;\n\n        return {poolPair, poolAddress, firstOfPair, secondOfPair, firstOfPairAddress, secondOfPairAddress, decimalsOfFirstPair, decimalsOfSecondPair, firstOfPairBalance, secondOfPairBalance, usdnStakingBalance, eurnStakingBalance, nsbtStakingBalance};\n\n      } catch(error) {\n        dispatch({type: 'ERROR'});\n      }\n    }\n    const poolDataFetches = Promise.all([\n      ...Object.keys(pools).map(poolPair => fetchPoolData({...pools[poolPair]}, poolPair))\n    ])\n    .catch(error => {\n      dispatch({type: 'ERROR'});\n    });\n  \n    //\n\n    //will be merged with \"poolDataFetches\"\n    async function fetchAndCalculatePairPrices({poolAddress, firstOfPair, secondOfPair, firstOfPairAddress, secondOfPairAddress, decimalsOfFirstPair, decimalsOfSecondPair}, limit) {\n      try {\n        //finding the pair name from the asset id, check firstOfExchnagedPair\n        const assetMatcher = {[firstOfPairAddress]: firstOfPair, [secondOfPairAddress]: secondOfPair};\n\n        //finding the decimal for the exchanged asset, check firstOfExchnagedPairAmount\n        const decimalsMatcher = {[firstOfPair]: decimalsOfFirstPair, [secondOfPair]: decimalsOfSecondPair}; \n\n        //fetch the recent transactions on the pool, detect the exchange one, if you can't find in the current batch run again.\n        //using this API: \"https://nodes.wavesnodes.com/api-docs/index.html#/transactions/addressLimit_1\"\n        let pagination = false;\n        let paginationId;\n        async function getLatestExchangeTransaction() {\n          try {\n            let transactions;\n            if(!pagination) {\n              transactions = await fetch(`${nodeURL}/transactions/address/${poolAddress}/limit/${limit}`)\n                .then(fetchSuccessHandler)\n            } else {\n              transactions = await fetch(`${nodeURL}/transactions/address/${poolAddress}/limit/${limit}?after=${paginationId}`)\n                .then(fetchSuccessHandler)\n            }\n            paginationId = transactions[0][transactions.length - 1].id;\n\n            const latestExchangeTransaction = transactions[0].find(transaction => {\n              if(transaction.type == 16 && transaction.call.function == 'exchange') {\n                return transaction;\n              } \n              return false;\n            });\n\n            if(!latestExchangeTransaction) {\n              pagination = true;\n              return await getLatestExchangeTransaction();\n            } else {\n              return latestExchangeTransaction;\n            }\n          } catch(error) {\n            dispatch({type: 'ERROR'});\n          }\n        }\n        const latestExchangeTransaction = await getLatestExchangeTransaction();\n\n        //calculate related-prices for a pair in all tracked pools by using the latestExchangeTransaction in each related pool.\n        const firstOfExchangedPair = assetMatcher[latestExchangeTransaction.payment[0].assetId ?? 'WAVES'];\n        const secondOfExchangedPair = firstOfExchangedPair == firstOfPair ? secondOfPair : firstOfPair;\n        const firstOfExchangedPairAmount = (latestExchangeTransaction.payment[0].amount) / (10**decimalsMatcher[firstOfExchangedPair]);\n        const secondOfExchangedPairAmount = (latestExchangeTransaction.stateChanges.transfers[0].amount + latestExchangeTransaction.stateChanges.transfers[1].amount) / (10**decimalsMatcher[secondOfExchangedPair]);\n        const firstOfPairPrice = Number((secondOfExchangedPairAmount / firstOfExchangedPairAmount).toFixed(6));\n        const secondOfPairPrice = Number((firstOfExchangedPairAmount / secondOfExchangedPairAmount).toFixed(6));\n\n        if(firstOfPair != firstOfExchangedPair) {\n          return {'firstOfPairPrice': secondOfPairPrice, 'secondOfPairPrice': firstOfPairPrice};\n        } else if(firstOfPair = firstOfExchangedPair) {\n          return {'firstOfPairPrice': firstOfPairPrice, 'secondOfPairPrice': secondOfPairPrice};\n        }\n      } catch(error) {\n        dispatch({type: 'ERROR'});\n      }\n    }\n    const poolPairPriceFetches = Promise.all([\n      ...Object.keys(pools).map(poolPair => fetchAndCalculatePairPrices({...pools[poolPair]}, 15))\n    ])\n    .catch(error => {\n      dispatch({type: 'ERROR'});\n    });\n\n    //\n\n    //will be merged with \"fetchAndCalculatePairPrices\" and \"poolDataFetches\"\n    //API: \"https://nodes.wavesnodes.com/api-docs/index.html#/assets/asset_details_array\"\n    const concatenatedPoolAssetsAPIUrl = Object.keys(poolAssets).map(poolAssetName => poolAssets[poolAssetName].address).reduce((concatenatedURL, assetAddress) => concatenatedURL+'id='+assetAddress+'&', `${nodeURL}/assets/details?`);\n    async function fetchPoolAssets(url) {\n      try {\n        const poolAssets = await fetch(concatenatedPoolAssetsAPIUrl)\n          .then(fetchSuccessHandler);\n        return poolAssets.map(poolAsset => ({poolAssetBalance: (poolAsset.quantity / (10 ** poolAsset.decimals)), poolAssetName: poolAsset.name, poolAssetId: poolAsset.assetId}));\n      } catch(error) {\n        dispatch({type: 'ERROR'});\n      }\n    }\n    const fetchedPoolAssetBalance = fetchPoolAssets();\n\n    //\n    \n    async function fetchLiquidityProviderWallets() {\n      try {\n        //first things first get the block height\n        //API : \"https://nodes.wavesnodes.com/api-docs/index.html#/blocks/height_1\"\n        let blockHeight = await fetch(`${nodeURL}/blocks/height`)\n          .then(fetchSuccessHandler);\n        blockHeight = blockHeight.height - 1;\n        \n        //let's fetch the wallets which have pool assets.\n        //API : \"https://nodes.wavesnodes.com/api-docs/index.html#/assets/balanceDistributionAtHeight_1\"\n        let poolAttendances = {};\n        let pagination = false;\n        let paginationId;\n        let wallets = [];\n        async function fetchWalletsOfEachAsset(poolAssetName, poolAssetAddress, limit) {\n          try {\n            if(!pagination) {\n              const fetchedWallets = (\n                await fetch(`${nodeURL}/assets/${poolAssetAddress}/distribution/${blockHeight}/limit/${limit}`)\n                .then(fetchSuccessHandler)\n              );\n              wallets.push(fetchedWallets.items);\n              paginationId = fetchedWallets.lastItem;\n              pagination = fetchedWallets.hasNext;\n            } else if(pagination) {\n              const fetchedWallets = (\n                await fetch(`${nodeURL}/assets/${poolAssetAddress}/distribution/${blockHeight}/limit/${limit}?after=${paginationId}`)\n                .then(fetchSuccessHandler)\n              );\n              wallets.push(fetchedWallets.items);\n              paginationId = fetchedWallets.lastItem;\n              pagination = fetchedWallets.hasNext;\n            }\n\n            if(!pagination) {\n              let walletsOfPoolAsset = {};\n              for(let i = 0; i < wallets.length; i++) {\n                walletsOfPoolAsset = {...walletsOfPoolAsset, ...wallets[i]}\n              }\n              wallets = [];\n              return {[poolAssetName]: walletsOfPoolAsset};\n            } else if(pagination) {\n              return await fetchWalletsOfEachAsset(poolAssetName, poolAssetAddress, limit);\n            }\n            \n          } catch(error) {\n            dispatch({type: 'ERROR'});\n          }\n        }\n\n        async function fetchStakedWallets() {\n          try {\n            const response = await fetch(`${nodeURL}/addresses/data/3P73HDkPqG15nLXevjCbmXtazHYTZbpPoPw`);\n            const stakedWallets = await response.json();\n\n            const poolAddresses = {};\n            Object.keys(pools).forEach(pool => {\n              poolAddresses[pools[pool].poolAddress] = pool;\n            });\n\n            const stakedWalletAmount = {};\n\n            stakedWallets.forEach(stakedWallet => {\n              if(!stakedWallet.key.includes('share_tokens_locked')) return;\n              const pool = stakedWallet.key.slice(0, 35);\n              const poolAssetName = poolAddresses[pool];\n              const balance = stakedWallet.value;\n              const wallet = stakedWallet.key.slice(36, 71);\n              if(stakedWalletAmount[poolAssetName] == undefined) {\n                stakedWalletAmount[poolAssetName] = {};\n              }\n              if(!Object.is(balance, 0) && wallet != 'total_share_tokens_locked') {\n                stakedWalletAmount[poolAssetName][wallet] = balance;\n              }\n            });\n            return Object.keys(stakedWalletAmount).map(stakedWalletPool => {\n              return {[stakedWalletPool]: stakedWalletAmount[stakedWalletPool]};\n            });\n          } catch(error) {\n            dispatch({type: 'ERROR'});\n          }\n        }\n        \n        const [nonStakedWallets, stakedWallets] = await Promise.all([\n          Promise.all([\n          ...Object.keys(poolAssets).map(poolAssetName => fetchWalletsOfEachAsset(poolAssetName, poolAssets[poolAssetName].address, 999))\n          ]),\n          fetchStakedWallets()\n        ]);\n\n        const allWalletsObject = {};\n        const stakedWalletsObject = {};\n        stakedWallets.forEach(stakedWallet => {\n          stakedWalletsObject[Object.keys(stakedWallet)[0]] = stakedWallet[Object.keys(stakedWallet)[0]];\n        });\n        const nonStakedWalletsObject = {};\n        nonStakedWallets.forEach(nonStakedWallet => {\n          nonStakedWalletsObject[Object.keys(nonStakedWallet)[0]] = nonStakedWallet[Object.keys(nonStakedWallet)[0]];\n        });\n\n        Object.keys(pools).forEach(pool => {\n          const stakingWallets = Object.keys(stakedWalletsObject[pool]);\n          const nonStakingWallets = Object.keys(nonStakedWalletsObject[pool]);\n          allWalletsObject[pool] = {...nonStakedWalletsObject[pool]};\n          stakingWallets.forEach(stakingWallet => {\n            if(nonStakingWallets.includes(stakingWallet)) {\n              allWalletsObject[pool][stakingWallet] = allWalletsObject[pool][stakingWallet] + stakedWalletsObject[pool][stakingWallet];\n            } else {\n              allWalletsObject[pool][stakingWallet] = stakedWalletsObject[pool][stakingWallet];\n            }\n          });\n        });\n        const allWallets = Object.keys(allWalletsObject).map(pool => {\n          delete allWalletsObject[pool]['3P73HDkPqG15nLXevjCbmXtazHYTZbpPoPw'];\n          return {[pool]: allWalletsObject[pool]};\n        });\n\n        for(let i = 0; i < allWallets.length; i++) {\n          poolAttendances = {...poolAttendances, ...allWallets[i]}\n        }\n\n        //structure the object, structure decimals, calculate unique wallets, sort wallets by their balances\n        function sorterByBalances(firstWallet, secondWallet) {\n          const firstWalletBalance = firstWallet[Object.keys(firstWallet)[0]];\n          const secondWalletBalance = secondWallet[Object.keys(secondWallet)[0]];\n          return secondWalletBalance - firstWalletBalance;\n        }\n        const uniqueWallets = [];\n        let poolAttendancesWithDecimals = {};\n          Object.keys(poolAttendances).forEach(poolAttendancePair => {\n            poolAttendancesWithDecimals[poolAttendancePair] = [];\n            Object.keys(poolAttendances[poolAttendancePair]).forEach(walletAddress => {\n              if(!uniqueWallets.includes(walletAddress)) {\n                uniqueWallets.push(walletAddress);\n              }\n              const amount = poolAttendances[poolAttendancePair][walletAddress] / 10**poolAssets[poolAttendancePair].decimals;\n              poolAttendancesWithDecimals[poolAttendancePair].push({[walletAddress]: amount});\n            });\n            poolAttendancesWithDecimals[poolAttendancePair].sort(sorterByBalances);\n          });\n        //add uniqueWallets at the end ->\n        poolAttendancesWithDecimals.uniqueWallets = uniqueWallets.length;\n\n        return poolAttendancesWithDecimals;\n\n      } catch(error) {\n        dispatch({type: 'ERROR'});\n      }\n    }\n    const liquidityProviderWalletFetches = fetchLiquidityProviderWallets();\n\n    //\n\n    async function fetchStakedSwopAmount() {\n      try {\n        const response = await fetch(`${nodeURL}/assets/balance/3PLHVWCqA9DJPDbadUofTohnCULLauiDWhS/Ehie5xYpeN8op1Cctc6aGUrqx8jq3jtf1DSjXDbfm7aT`);\n        if(!response.ok) throw new Error('Unknown but certainly caught error!');\n        const data = await response.json();\n        const stakedAmount = data.balance / 10**8;\n        return stakedAmount;\n      } catch(error) {\n        dispatch({type: 'ERROR'});\n      }\n    }\n    const stakedSwopAmountFetch = fetchStakedSwopAmount();\n\n    //COMBINING DATA\n    Promise.all([poolDataFetches, poolPairPriceFetches, fetchedPoolAssetBalance, liquidityProviderWalletFetches, stakedSwopAmountFetch])\n      .then(([poolData, poolPairPrices, poolAssetBalances, liquidityProviderWallets, stakedSwopAmount]) => {\n\n        //merge pool data and pool pair prices\n        const mergedPoolDataAndPairPrices = [];\n        poolData.forEach((eachPoolData, idx) => {\n          mergedPoolDataAndPairPrices.push({...eachPoolData, ...poolPairPrices[idx], ...poolAssetBalances[idx]});\n        });\n        \n        //price calculator starts\n        const pricesInTermsOfUSDN = usdnPriceCalculator(mergedPoolDataAndPairPrices)\n        const pricesInTermsOfWAVES = wavesPriceCalculator(mergedPoolDataAndPairPrices, pricesInTermsOfUSDN);\n\n        //set state and say goodbye .......\n        dispatch({\n          type: 'DONE',\n          payload: {\n            poolData: mergedPoolDataAndPairPrices,\n            poolProviderWallets: liquidityProviderWallets,\n            pricesInUSDN: pricesInTermsOfUSDN,\n            pricesInWAVES: pricesInTermsOfWAVES,\n            stakedSwopAmount: stakedSwopAmount\n          }\n        });\n      })\n      .catch(error => {\n        dispatch({type: 'ERROR'});\n      });\n\n  }, []);\n\n  return state;\n}\n\n\nexport { FetchPoolData };","/Users/berkanturan/Desktop/swopscan.com/swopscan/src/helpers/FetchWalletData.js",["184","185"],"import { useState, useEffect } from 'react';\nimport { poolAssets, nodeURL } from '../data/addresses';\n\n\nconst concatenatedPoolAssetsAPIUrl = Object.keys(poolAssets).map(poolAssetName => poolAssets[poolAssetName].address).reduce((concatenatedURL, assetAddress) => concatenatedURL+'id='+assetAddress+'&', `${nodeURL}/assets/details?`);\n\nfunction FetchWalletData(walletAddress) {\n  const [loading, setLoading] = useState(true);\n  const [balances, setBalances] = useState();\n  const [isError, setIsError] = useState(false);\n\n  //catch helper\n  function errorCatcher(error) {\n    setIsError(true);\n    setLoading(false);\n  }\n\n  useEffect(() => {\n    setIsError(false);\n    setLoading(true);\n\n    //for each call of \"fetchWalletBalance\" we fetch the \"walletAddress\"' related asset, we fetch for all of the \"poolAssets\" pool assets\n    //using this API: \"https://nodes.wavesnodes.com/api-docs/index.html#/assets/balance\"\n    async function fetchWalletBalance({url, pair}) {\n      try {\n        const response = await fetch(url);\n        if(!response.ok) throw new Error('Unknown but certainly caught error!');\n        const data = await response.json();\n        return {pair, walletBalance: data.balance, nonStakedBalance: data.balance, stakedBalance: 0};\n      } catch(error) {\n        throw new Error(error);\n      }\n    }\n    const fetchedWalletBalances = Promise.all([\n      ...Object.keys(poolAssets).map(poolAssetName => fetchWalletBalance({url: `${nodeURL}/assets/balance/${walletAddress}/${poolAssets[poolAssetName].address}`, pair: poolAssetName}))\n    ])\n    .catch(errorCatcher);\n  \n    //using \"concatenatedPoolAssetsAPIUrl\" and it fetches the details of \"poolAssets\" pool assets.\n    //using this API: \"https://nodes.wavesnodes.com/api-docs/index.html#/assets/asset_details_array\"\n    async function fetchTotalBalance(url) {\n      try {\n        const response = await fetch(url);\n        if(!response.ok) throw new Error('Unknown but certainly caught error!');\n        const pairTokens = await response.json();\n        return pairTokens.map(pairToken => ({totalQuantity: pairToken.quantity, decimals: pairToken.decimals, name: pairToken.name}));\n      } catch(error) {\n        throw error;\n      }\n    }\n    const fetchedTotalBalances = fetchTotalBalance(concatenatedPoolAssetsAPIUrl).catch(errorCatcher);\n\n  \n    //using this API: \"https://nodes.wavesnodes.com/api-docs/index.html#/addresses/getData_1\"\n    async function fetchStakedAssets() {\n      try {\n        const response = await fetch(`${nodeURL}/addresses/data/3P73HDkPqG15nLXevjCbmXtazHYTZbpPoPw?matches=.%2A${walletAddress}.%2A`);\n        const data = await response.json();\n        const stakedAssets = {};\n        for(let i = 0; i < data.length; i++) {\n          if(data[i].key.includes('share_tokens_locked')) {\n            const pool = data[i].key.slice(0, 35);\n            const poolAssetName = Object.values(poolAssets).find(poolAsset => poolAsset.pool == pool).name;\n            const balance = data[i].value;\n            stakedAssets[poolAssetName] = balance;\n          }\n        }\n        return stakedAssets;\n      } catch(error) {\n        throw new Error(error);\n      }\n    }\n    const fetchedStakedAssets = fetchStakedAssets().catch(errorCatcher); \n\n    //using this API: \"https://nodes.wavesnodes.com/api-docs/index.html#/addresses/getData_1\"\n    async function fetchStakedSwop() {\n      try {\n        const response = await fetch(`${nodeURL}/addresses/data/3PLHVWCqA9DJPDbadUofTohnCULLauiDWhS?matches=.%2A${walletAddress}.%2A`);\n        const data = await response.json();\n        const stakedSwop = {stakedSwop: 0};\n        for(let i = 0; i < data.length; i++) {\n          if(data[i].key == `${walletAddress}_SWOP_amount`) {\n            stakedSwop.stakedSwop = data[i].value / 10**8\n          }\n        }\n        return stakedSwop;\n      } catch(error) {\n        throw new Error(error);\n      }\n    }\n    const fetchedStakedSwop = fetchStakedSwop().catch(errorCatcher);\n\n  \n    //Combining wallet pool tokens and total issued pool tokens.\n    Promise.all([fetchedWalletBalances, fetchedTotalBalances, fetchedStakedAssets, fetchedStakedSwop])\n      .then(([walletBalances, totalBalances, stakedAssets, stakedSwop]) => {\n        const walletAndTotalPoolAsset = [];\n        walletBalances.forEach((walletBalance, idx) => {\n          walletAndTotalPoolAsset.push({...walletBalance, ...totalBalances[idx]});\n        });\n        walletAndTotalPoolAsset.forEach(assetData => {\n          if(Object.keys(stakedAssets).includes(assetData.name)) {\n            assetData.stakedBalance = stakedAssets[assetData.name];\n            assetData.walletBalance = assetData.walletBalance + stakedAssets[assetData.name];\n          }\n        });\n        walletAndTotalPoolAsset.unshift(stakedSwop);\n        setBalances(walletAndTotalPoolAsset);\n        setLoading(false);\n      })\n      .catch(errorCatcher)\n\n  }, [walletAddress]);\n  return [balances, loading, isError];\n}\n\n\nexport { FetchWalletData };",{"ruleId":"186","replacedBy":"187"},{"ruleId":"188","replacedBy":"189"},{"ruleId":"190","severity":1,"message":"191","line":103,"column":17,"nodeType":"192","messageId":"193","endLine":103,"endColumn":19},{"ruleId":"190","severity":1,"message":"191","line":104,"column":28,"nodeType":"192","messageId":"193","endLine":104,"endColumn":30},{"ruleId":"190","severity":1,"message":"191","line":106,"column":65,"nodeType":"192","messageId":"193","endLine":106,"endColumn":67},{"ruleId":"190","severity":1,"message":"191","line":108,"column":42,"nodeType":"192","messageId":"193","endLine":108,"endColumn":44},{"ruleId":"190","severity":1,"message":"191","line":132,"column":35,"nodeType":"192","messageId":"193","endLine":132,"endColumn":37},{"ruleId":"190","severity":1,"message":"191","line":135,"column":36,"nodeType":"192","messageId":"193","endLine":135,"endColumn":38},{"ruleId":"190","severity":1,"message":"191","line":112,"column":41,"nodeType":"192","messageId":"193","endLine":112,"endColumn":43},{"ruleId":"190","severity":1,"message":"191","line":113,"column":40,"nodeType":"192","messageId":"193","endLine":113,"endColumn":42},{"ruleId":"190","severity":1,"message":"191","line":232,"column":76,"nodeType":"192","messageId":"193","endLine":232,"endColumn":78},{"ruleId":"190","severity":1,"message":"191","line":233,"column":122,"nodeType":"192","messageId":"193","endLine":233,"endColumn":124},{"ruleId":"190","severity":1,"message":"191","line":267,"column":81,"nodeType":"192","messageId":"193","endLine":267,"endColumn":83},{"ruleId":"190","severity":1,"message":"191","line":274,"column":83,"nodeType":"192","messageId":"193","endLine":274,"endColumn":85},{"ruleId":"190","severity":1,"message":"191","line":6,"column":25,"nodeType":"192","messageId":"193","endLine":6,"endColumn":27},{"ruleId":"190","severity":1,"message":"191","line":8,"column":33,"nodeType":"192","messageId":"193","endLine":8,"endColumn":35},{"ruleId":"190","severity":1,"message":"194","line":10,"column":32,"nodeType":"192","messageId":"193","endLine":10,"endColumn":34},{"ruleId":"190","severity":1,"message":"194","line":10,"column":63,"nodeType":"192","messageId":"193","endLine":10,"endColumn":65},{"ruleId":"190","severity":1,"message":"191","line":27,"column":29,"nodeType":"192","messageId":"193","endLine":27,"endColumn":31},{"ruleId":"190","severity":1,"message":"191","line":29,"column":37,"nodeType":"192","messageId":"193","endLine":29,"endColumn":39},{"ruleId":"190","severity":1,"message":"191","line":64,"column":25,"nodeType":"192","messageId":"193","endLine":64,"endColumn":27},{"ruleId":"190","severity":1,"message":"191","line":66,"column":33,"nodeType":"192","messageId":"193","endLine":66,"endColumn":35},{"ruleId":"190","severity":1,"message":"194","line":68,"column":32,"nodeType":"192","messageId":"193","endLine":68,"endColumn":34},{"ruleId":"190","severity":1,"message":"194","line":68,"column":64,"nodeType":"192","messageId":"193","endLine":68,"endColumn":66},{"ruleId":"190","severity":1,"message":"191","line":79,"column":23,"nodeType":"192","messageId":"193","endLine":79,"endColumn":25},{"ruleId":"195","severity":1,"message":"196","line":4,"column":3,"nodeType":"197","messageId":"198","endLine":4,"endColumn":156,"fix":"199"},{"ruleId":"195","severity":1,"message":"200","line":5,"column":3,"nodeType":"197","messageId":"198","endLine":5,"endColumn":158,"fix":"201"},{"ruleId":"195","severity":1,"message":"202","line":6,"column":3,"nodeType":"197","messageId":"198","endLine":6,"endColumn":155,"fix":"203"},{"ruleId":"195","severity":1,"message":"204","line":7,"column":3,"nodeType":"197","messageId":"198","endLine":7,"endColumn":156,"fix":"205"},{"ruleId":"195","severity":1,"message":"206","line":8,"column":3,"nodeType":"197","messageId":"198","endLine":8,"endColumn":155,"fix":"207"},{"ruleId":"195","severity":1,"message":"208","line":9,"column":3,"nodeType":"197","messageId":"198","endLine":9,"endColumn":156,"fix":"209"},{"ruleId":"195","severity":1,"message":"210","line":10,"column":3,"nodeType":"197","messageId":"198","endLine":10,"endColumn":158,"fix":"211"},{"ruleId":"195","severity":1,"message":"212","line":11,"column":3,"nodeType":"197","messageId":"198","endLine":11,"endColumn":156,"fix":"213"},{"ruleId":"195","severity":1,"message":"214","line":12,"column":3,"nodeType":"197","messageId":"198","endLine":12,"endColumn":156,"fix":"215"},{"ruleId":"195","severity":1,"message":"216","line":13,"column":3,"nodeType":"197","messageId":"198","endLine":13,"endColumn":158,"fix":"217"},{"ruleId":"195","severity":1,"message":"218","line":14,"column":3,"nodeType":"197","messageId":"198","endLine":14,"endColumn":157,"fix":"219"},{"ruleId":"195","severity":1,"message":"196","line":18,"column":3,"nodeType":"197","messageId":"198","endLine":26,"endColumn":4,"fix":"220"},{"ruleId":"195","severity":1,"message":"200","line":27,"column":3,"nodeType":"197","messageId":"198","endLine":35,"endColumn":4,"fix":"221"},{"ruleId":"195","severity":1,"message":"202","line":36,"column":3,"nodeType":"197","messageId":"198","endLine":44,"endColumn":4,"fix":"222"},{"ruleId":"195","severity":1,"message":"204","line":45,"column":3,"nodeType":"197","messageId":"198","endLine":53,"endColumn":4,"fix":"223"},{"ruleId":"195","severity":1,"message":"206","line":54,"column":3,"nodeType":"197","messageId":"198","endLine":62,"endColumn":4,"fix":"224"},{"ruleId":"195","severity":1,"message":"208","line":63,"column":3,"nodeType":"197","messageId":"198","endLine":71,"endColumn":4,"fix":"225"},{"ruleId":"195","severity":1,"message":"210","line":72,"column":3,"nodeType":"197","messageId":"198","endLine":80,"endColumn":4,"fix":"226"},{"ruleId":"195","severity":1,"message":"212","line":81,"column":3,"nodeType":"197","messageId":"198","endLine":89,"endColumn":4,"fix":"227"},{"ruleId":"195","severity":1,"message":"214","line":90,"column":3,"nodeType":"197","messageId":"198","endLine":98,"endColumn":4,"fix":"228"},{"ruleId":"195","severity":1,"message":"216","line":99,"column":3,"nodeType":"197","messageId":"198","endLine":107,"endColumn":4,"fix":"229"},{"ruleId":"195","severity":1,"message":"218","line":108,"column":3,"nodeType":"197","messageId":"198","endLine":116,"endColumn":4,"fix":"230"},{"ruleId":"190","severity":1,"message":"191","line":91,"column":76,"nodeType":"192","messageId":"193","endLine":91,"endColumn":78},{"ruleId":"190","severity":1,"message":"191","line":168,"column":56,"nodeType":"192","messageId":"193","endLine":168,"endColumn":58},{"ruleId":"190","severity":1,"message":"191","line":47,"column":76,"nodeType":"192","messageId":"193","endLine":47,"endColumn":78},{"ruleId":"190","severity":1,"message":"191","line":57,"column":15,"nodeType":"192","messageId":"193","endLine":57,"endColumn":17},{"ruleId":"190","severity":1,"message":"191","line":60,"column":24,"nodeType":"192","messageId":"193","endLine":60,"endColumn":26},{"ruleId":"190","severity":1,"message":"191","line":66,"column":25,"nodeType":"192","messageId":"193","endLine":66,"endColumn":27},{"ruleId":"190","severity":1,"message":"191","line":74,"column":33,"nodeType":"192","messageId":"193","endLine":74,"endColumn":35},{"ruleId":"190","severity":1,"message":"191","line":74,"column":63,"nodeType":"192","messageId":"193","endLine":74,"endColumn":65},{"ruleId":"190","severity":1,"message":"191","line":128,"column":35,"nodeType":"192","messageId":"193","endLine":128,"endColumn":37},{"ruleId":"190","severity":1,"message":"191","line":128,"column":70,"nodeType":"192","messageId":"193","endLine":128,"endColumn":72},{"ruleId":"190","severity":1,"message":"191","line":148,"column":60,"nodeType":"192","messageId":"193","endLine":148,"endColumn":62},{"ruleId":"190","severity":1,"message":"194","line":154,"column":24,"nodeType":"192","messageId":"193","endLine":154,"endColumn":26},{"ruleId":"231","severity":1,"message":"232","line":156,"column":19,"nodeType":"233","messageId":"234","endLine":156,"endColumn":53},{"ruleId":"190","severity":1,"message":"191","line":62,"column":92,"nodeType":"192","messageId":"193","endLine":62,"endColumn":94},{"ruleId":"190","severity":1,"message":"191","line":77,"column":24,"nodeType":"192","messageId":"193","endLine":77,"endColumn":26},{"ruleId":"190","severity":1,"message":"191","line":62,"column":24,"nodeType":"192","messageId":"193","endLine":62,"endColumn":26},{"ruleId":"190","severity":1,"message":"191","line":68,"column":25,"nodeType":"192","messageId":"193","endLine":68,"endColumn":27},{"ruleId":"190","severity":1,"message":"191","line":76,"column":33,"nodeType":"192","messageId":"193","endLine":76,"endColumn":35},{"ruleId":"190","severity":1,"message":"191","line":76,"column":63,"nodeType":"192","messageId":"193","endLine":76,"endColumn":65},{"ruleId":"190","severity":1,"message":"191","line":130,"column":35,"nodeType":"192","messageId":"193","endLine":130,"endColumn":37},{"ruleId":"190","severity":1,"message":"191","line":130,"column":70,"nodeType":"192","messageId":"193","endLine":130,"endColumn":72},{"ruleId":"190","severity":1,"message":"191","line":150,"column":60,"nodeType":"192","messageId":"193","endLine":150,"endColumn":62},{"ruleId":"190","severity":1,"message":"194","line":156,"column":24,"nodeType":"192","messageId":"193","endLine":156,"endColumn":26},{"ruleId":"231","severity":1,"message":"232","line":158,"column":19,"nodeType":"233","messageId":"234","endLine":158,"endColumn":53},{"ruleId":"190","severity":1,"message":"191","line":258,"column":52,"nodeType":"192","messageId":"193","endLine":258,"endColumn":54},{"ruleId":"190","severity":1,"message":"194","line":261,"column":51,"nodeType":"192","messageId":"193","endLine":261,"endColumn":53},{"ruleId":"190","severity":1,"message":"191","line":63,"column":94,"nodeType":"192","messageId":"193","endLine":63,"endColumn":96},{"ruleId":"190","severity":1,"message":"191","line":82,"column":26,"nodeType":"192","messageId":"193","endLine":82,"endColumn":28},"no-native-reassign",["235"],"no-negated-in-lhs",["236"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-useless-computed-key","Unnecessarily computed property ['SWOP - USDN'] found.","Property","unnecessarilyComputedProperty",{"range":"237","text":"238"},"Unnecessarily computed property ['WAVES - USDN'] found.",{"range":"239","text":"240"},"Unnecessarily computed property ['BTC - USDN'] found.",{"range":"241","text":"242"},"Unnecessarily computed property ['USDT - USDN'] found.",{"range":"243","text":"244"},"Unnecessarily computed property ['ETH - USDN'] found.",{"range":"245","text":"246"},"Unnecessarily computed property ['NSBT - USDN'] found.",{"range":"247","text":"248"},"Unnecessarily computed property ['USDLP - USDN'] found.",{"range":"249","text":"250"},"Unnecessarily computed property ['WAVES - BTC'] found.",{"range":"251","text":"252"},"Unnecessarily computed property ['WEST - USDN'] found.",{"range":"253","text":"254"},"Unnecessarily computed property ['WCT - USDN'] found.",{"range":"255","text":"256"},"Unnecessarily computed property ['WAVES - EURN'] found.",{"range":"257","text":"258"},{"range":"259","text":"238"},{"range":"260","text":"240"},{"range":"261","text":"242"},{"range":"262","text":"244"},{"range":"263","text":"246"},{"range":"264","text":"248"},{"range":"265","text":"250"},{"range":"266","text":"252"},{"range":"267","text":"254"},{"range":"268","text":"256"},{"range":"269","text":"258"},"no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","no-global-assign","no-unsafe-negation",[86,101],"'SWOP - USDN'",[243,259],"'WAVES - USDN'",[402,416],"'BTC - USDN'",[558,573],"'USDT - USDN'",[715,729],"'ETH - USDN'",[871,886],"'NSBT - USDN'",[1028,1044],"'USDLP - USDN'",[1187,1202],"'WAVES - BTC'",[1344,1359],"'WEST - USDN'",[1501,1515],"'WCT - USDN'",[1660,1676],"'WAVES - EURN'",[1844,1859],[2184,2200],[2487,2501],[2825,2840],[3165,3179],[3503,3518],[3843,3859],[4185,4200],[4486,4501],[4826,4840],[5164,5180]]